// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(admin)/admin/content/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/content">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/content/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/dashboard">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/inquiries/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/inquiries">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/inquiries/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/login">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/unauthorized/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/unauthorized">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/unauthorized/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/vehicles/[id]/reports/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/vehicles/[id]/reports/new">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/vehicles/[id]/reports/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/vehicles/[id]/reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/vehicles/[id]/reports">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/vehicles/[id]/reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/vehicles/add/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/vehicles/add">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/vehicles/add/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/vehicles/edit/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/vehicles/edit/[id]">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/vehicles/edit/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(admin)/admin/vehicles/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/vehicles">> = Specific
  const handler = {} as typeof import("../../app/(admin)/admin/vehicles/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/about/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/about">> = Specific
  const handler = {} as typeof import("../../app/(site)/about/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/blog/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/blog/[slug]">> = Specific
  const handler = {} as typeof import("../../app/(site)/blog/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/blog/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/blog">> = Specific
  const handler = {} as typeof import("../../app/(site)/blog/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/contact/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/contact">> = Specific
  const handler = {} as typeof import("../../app/(site)/contact/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/debug/sales/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/debug/sales">> = Specific
  const handler = {} as typeof import("../../app/(site)/debug/sales/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(site)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/portfolio/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/portfolio">> = Specific
  const handler = {} as typeof import("../../app/(site)/portfolio/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/services/detailing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/detailing">> = Specific
  const handler = {} as typeof import("../../app/(site)/services/detailing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services">> = Specific
  const handler = {} as typeof import("../../app/(site)/services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/services/servicing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/servicing">> = Specific
  const handler = {} as typeof import("../../app/(site)/services/servicing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/vehicles/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/vehicles/[slug]">> = Specific
  const handler = {} as typeof import("../../app/(site)/vehicles/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/vehicles/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/vehicles">> = Specific
  const handler = {} as typeof import("../../app/(site)/vehicles/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/login">> = Specific
  const handler = {} as typeof import("../../app/auth/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/checkcardetails-lookup/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/checkcardetails-lookup">> = Specific
  const handler = {} as typeof import("../../app/api/checkcardetails-lookup/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/checkcardetails-pricing/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/checkcardetails-pricing">> = Specific
  const handler = {} as typeof import("../../app/api/checkcardetails-pricing/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/contact/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/contact">> = Specific
  const handler = {} as typeof import("../../app/api/contact/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/sync-checkcar-schema/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/sync-checkcar-schema">> = Specific
  const handler = {} as typeof import("../../app/api/sync-checkcar-schema/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/vehicle-lookup/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/vehicle-lookup">> = Specific
  const handler = {} as typeof import("../../app/api/vehicle-lookup/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/signout/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/signout">> = Specific
  const handler = {} as typeof import("../../app/auth/signout/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/(admin)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(admin)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(site)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(site)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
